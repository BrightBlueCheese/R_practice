new_df %>% filter(weight <= 0) %>% select(index, weight)
# sd
weight_sd_3 <- sd(new_df$weight) * 3
new_df %>% filter(weight <= weight_sd_3)
new_df %>% filter(weight > weight_sd_3)
new_df %>% filter(!((weight < weight_sd_3) $ (weight > -weight_sd_3)))
new_df %>% filter(!((weight < weight_sd_3) $ (weight > -weight_sd_3)))
new_df %>% filter(!((weight < weight_sd_3) & (weight > -weight_sd_3)))
new_df %>% filter(!((weight < weight_sd_3) & (weight > -weight_sd_3))) %>%
select(index, weight)
new_df %>% filter(weight > weight_sd_3) %>%
select(index, weight)
new_df$weight
summary(new_df$weight)
sd(new_df$weight)
avg(new_df$weight)
?average
??average
new_df %>% filter(!((weight < weight_sd_3) & (weight > -weight_sd_3))) %>%
select(index, weight)
help(?average)
mean(new_df$weight)
tryCatch({rawData %>%
chain_start %>%
assert(within_bounds(1,Inf), weight) %>% # assert checks individual values
insist(within_n_sds(3), weight) %>% # insist checks against calculated vals
chain_end
}, warning = function(w) {
paste("A warning was generated: ", w, sep = "")
}, error = function(e) {
print(e)
}, finally = {
print("this is the end of the validation check ...")
}
)
weight_sd_3 <- sd(new_df$weight) * 3
sd(new_df$weight)
new_df %>% filter(weight > weight_sd_3) %>%
select(index, weight)
new_df %>% filter(!((weight < weight_sd_3) & (weight > -weight_sd_3))) %>%
select(index, weight)
tryCatch({rawData %>%
chain_start %>%
assert(within_bounds(1,Inf), weight) %>% # assert checks individual values
insist(within_n_sds(3), weight) %>% # insist checks against calculated vals
chain_end
}, warning = function(w) {
paste("A warning was generated: ", w, sep = "")
}, error = function(e) {
print(e)
}, finally = {
print("this is the end of the validation check ...")
}
)
# Some example code to use assert/insist to identify problems
tryCatch({rawData %>%
chain_start %>%
assert(within_bounds(1,Inf), weight) %>% # assert checks individual values
assert(within_bounds(1,Inf), length) %>%
insist(within_n_sds(3), weight) %>% # insist checks against calculated vals
insist(within_n_sds(3), length) %>%
chain_end
}, warning = function(w) {
paste("A warning was generated: ", w, sep = "")
}, error = function(e) {
print(e)
}, finally = {
print("this is the end of the validation check ...")
}
)
#Topic 05-Cleaning the Data
###########################################
# Title: MW_5.1_Lee
# Script Name:  HW_5.1_Lee
# Name: Youngmin Lee
# Date: Oct 17 2022
# Script purpose: Class Homework for 5.1
#
###########################################
### Load the packages
library(tidyverse) # For tidy tools
library(mice)      # For the mice functions
library(assertr)   # For the assert functions
library(leaflet)   # For the leaflet functions
library(sp)        # For the sp functions
library(stringdist)
#import the full rodent data dataset
rawData <- read_csv("./dataset/rodentData_clean.csv")
# Some example code to use assert/insist to identify problems
tryCatch({rawData %>%
chain_start %>%
assert(within_bounds(1,Inf), weight) %>% # assert checks individual values
assert(within_bounds(1,Inf), length) %>%
insist(within_n_sds(3), weight) %>% # insist checks against calculated vals
insist(within_n_sds(3), length) %>%
chain_end
}, warning = function(w) {
paste("A warning was generated: ", w, sep = "")
}, error = function(e) {
print(e)
}, finally = {
print("this is the end of the validation check ...")
}
)
##############################################################################
## HW5 Here ##################################################################
## Copy and modify the assert/insist to find the errors in the weight data
tryCatch({rawData %>%
chain_start %>%
assert(within_bounds(1,Inf), weight) %>% # assert checks individual values
insist(within_n_sds(3), weight) %>% # insist checks against calculated vals
chain_end
}, warning = function(w) {
paste("A warning was generated: ", w, sep = "")
}, error = function(e) {
print(e)
}, finally = {
print("this is the end of the validation check ...")
}
)
# create a new df and add a index column to track the data
new_df <- mutate(rawData)
new_df <- tibble::rowid_to_column(new_df, 'index')
names(new_df)
# weight
new_df %>% filter((weight < 1) | (weight > Inf)) %>%
select(index, weight)
summary(new_df$weight)
mean(new_df$weight)
weight_sd_3 <- sd(new_df$weight) * 3
sd(new_df$weight)
test.vector <- rnorm(100, mean=100, sd=20)
within.one.sd <- within_n_sds(1)
custom.bounds.checker <- within.one.sd(test.vector)
custom.bounds.checker(105)     # returns TRUE
custom.bounds.checker(40)
sd(test_vector)
sd(test.vector)
custom.bounds.checker(105)     # returns TRUE
custom.bounds.checker(40)
sd(test.vector)
new_df %>% filter(weight > (weight_sd_3 + mean(new_df$weight))) %>%
select(index, weight)
new_df %>% filter(weight > (weight_sd_3 + mean(new_df$weight))) %>%
select(index, weight)
weight_sd_3 <- sd(new_df$weight) * 3 + mean(new_df$weight)
new_df %>% filter(weight > weight_sd_3) %>%
select(index, weight)
new_df %>% filter(weight >= weight_sd_3) %>%
select(index, weight)
new_df %>% filter(weight > weight_sd_3) %>%
select(index, weight)
weight_sd_3 <- sd(new_df$weight) * 3
weight_mean <- mean(new_df$weight)
sd(new_df$weight)
new_df %>%
filter( (weight > weight_sd_3 + weight_mean) & (weight < weight_mean - weight_sd_3) )
new_df %>%
filter( (weight > weight_sd_3 + weight_mean) & (weight < weight_mean - weight_sd_3) )
new_df %>%
filter( (weight > weight_sd_3 + weight_mean) | (weight < weight_mean - weight_sd_3) )
weight_na_omit <- na.omit(new_df$weight)
weight_sd_3_omit <- sd(weight_na_omit) *3
weight_mean_omit <- sd(weight_na_omit)
weight_mean_omit <- mean(weight_na_omit)
weight_0_omit <- new_df %>% filter(weight == 0)
weight_sd_3_omit <- sd(weight_na_omit) *3
weight_mean_omit <- mean(weight_na_omit)
weight_0_omit <- new_df %>% filter(weight == 0)
weight_0_omit <- new_df %>% filter(weight != 0)
weight_sd_3_omit <- sd(weight_na_omit) *3
weight_mean_omit <- mean(weight_na_omit)
weight_sd_3 <- sd(new_df$weight) * 3
weight_mean <- mean(new_df$weight)
new_df %>% filter(weight == 0)
new_df %>% filter(weight == 0) %>% select(index, weight)
new_df %>% filter(weight == 0) %>% select(weight)
new_df %>% filter(weight != 0) %>% select(weight)
weight_0_omit <- new_df %>% filter(weight != 0) %>% select(weight)
weight_sd_3_omit <- sd(weight_na_omit) *3
weight_mean_omit <- mean(weight_na_omit)
weight_sd_3_omit <- sd(weight_0_omit) *3
weight_mean_omit <- mean(weight_0_omit)
weight_0_omit
weight_sd_3_omit <- sd(weight_0_omit) *3
weight_0_omit <- new_df %>% filter(weight != 0)
weight_sd_3_omit <- sd(weight_0_omit$weight) *3
weight_mean_omit <- mean(weight_0_omit$weight)
new_df %>%
filter( (weight > weight_sd_3_omit + weight_mean_omit)
| (weight < weight_mean_omit - weight_sd_3_omit) )
new_df %>% filter((weight %>% weight_sd_3_omit + weight_mean_omit))
new_df %>% filter((weight %>% weight_sd_3_omit + weight_mean_omit))
new_df %>% filter(weight > (weight_sd_3_omit + weight_mean_omit))
new_df %>% filter(weight > (weight_sd_3 + mean(new_df$weight))) %>%
select(index, weight)
options(max.print=999999)
tryCatch({rawData %>%
chain_start %>%
assert(within_bounds(1,Inf), weight) %>% # assert checks individual values
insist(within_n_sds(3), weight) %>% # insist checks against calculated vals
chain_end
}, warning = function(w) {
paste("A warning was generated: ", w, sep = "")
}, error = function(e) {
print(e)
}, finally = {
print("this is the end of the validation check ...")
}
)
new_df %>%
filter( (weight > weight_mean + weight_sd_3) | (weight < weight_mean - weight_sd_3) )
# length not within 1 and inf
new_df %>% filter((length < 1) | (length > Inf)) %>%
select(index, length)
# 3sd and mean of length
length_sd_3 <- sd(new_df$length) * 3
length_mean <- mean(new_df$length)
# length not within 3sd
new_df %>%
filter((length > length_mean + length_sd_3)
| (length < length_mean - length_sd_3))
# Some example code to use assert/insist to identify problems
tryCatch({rawData %>%
chain_start %>%
assert(within_bounds(1,Inf), weight) %>% # assert checks individual values
assert(within_bounds(1,Inf), length) %>%
insist(within_n_sds(3), weight) %>% # insist checks against calculated vals
insist(within_n_sds(3), length) %>%
chain_end
}, warning = function(w) {
paste("A warning was generated: ", w, sep = "")
}, error = function(e) {
print(e)
}, finally = {
print("this is the end of the validation check ...")
}
)
# weight not witnin 1 and inf
new_df %>% filter((weight < 1) | (weight > Inf)) %>%
select(index, weight)
# weight not within 3sd
new_df %>%
filter( (weight > weight_mean + weight_sd_3)
| (weight < weight_mean - weight_sd_3) )
# length not within 1 and inf
new_df %>% filter((length < 1) | (length > Inf)) %>%
select(index, length)
# length not within 3sd
new_df %>%
filter((length > length_mean + length_sd_3)
| (length < length_mean - length_sd_3))
12 + 190 + 3 + 107
# YES!
# Now combine those data into a new dataframe
weight_bounds <- new_df %>% filter((weight < 1) | (weight > Inf)) %>%
select(index, weight)
# YES!
# Now combine those data into a new dataframe
weight_bounds <- new_df %>% filter((weight < 1) | (weight > Inf)) %>%
select(index, weight)
weight_3sd <- new_df %>%
filter( (weight > weight_mean + weight_sd_3)
| (weight < weight_mean - weight_sd_3) )
length_bounds <- new_df %>% filter((length < 1) | (length > Inf)) %>%
select(index, length)
length_3sd <- new_df %>%
filter((length > length_mean + length_sd_3)
| (length < length_mean - length_sd_3))
weight_bounds
# weight not within 3sd
new_df %>%
filter( (weight > weight_mean + weight_sd_3)
| (weight < weight_mean - weight_sd_3) ) %>%
select(index, weight)
# length not within 3sd
new_df %>%
filter((length > length_mean + length_sd_3)
| (length < length_mean - length_sd_3)) %>%
select(index, length)
# YES!
# Now combine those data into a new dataframe
weight_bounds <- new_df %>% filter((weight < 1) | (weight > Inf))
weight_3sd <- new_df %>%
filter( (weight > weight_mean + weight_sd_3)
| (weight < weight_mean - weight_sd_3) )
length_bounds <- new_df %>% filter((length < 1) | (length > Inf))
length_3sd <- new_df %>%
filter((length > length_mean + length_sd_3)
| (length < length_mean - length_sd_3))
weight_bounds
calmarx <- new_df %>% filter((weight < 1) | (weight > Inf)) %>% mutate(column = 'weight')
calmarx
calmarx <- new_df %>% filter((weight < 1) | (weight > Inf)) %>%
select(index, weight) %>% mutate(column = 'weight')
calmarx
calmarx <- new_df %>% filter((weight < 1) | (weight > Inf)) %>%
select(index, weight) %>% mutate(column = 'weight', condition = '1, Inf')
calmarx
calmarx <- new_df %>% filter((weight < 1) | (weight > Inf)) %>%
select(index, weight) %>% mutate(column = 'weight', condition = '1, Inf',
value = weight)
calmarx
calmarx <- new_df %>% filter( (weight > weight_mean + weight_sd_3)
| (weight < weight_mean - weight_sd_3) ) %>%
select(index, weight) %>% mutate(column = 'weight', condition = '1, Inf',
value = weight)
calmarx
# YES!
# Now combine those data into a new dataframe
weight_bounds <- new_df %>% filter((weight < 1) | (weight > Inf)) %>%
mutate(condition = '(1, Inf)', column = 'weight', value = weight)
weight_3sd <- new_df %>%
filter( (weight > weight_mean + weight_sd_3)
| (weight < weight_mean - weight_sd_3)) %>%
mutate(condition = 'within 3sd', column = 'weight', value = weight)
length_bounds <- new_df %>% filter((length < 1) | (length > Inf)) %>%
mutate(condition = '(1, Inf)', column = 'length', value = length)
length_3sd <- new_df %>%
filter((length > length_mean + length_sd_3)
| (length < length_mean - length_sd_3)) %>%
mutate(condition = 'within 3sd', column = 'length', value = length)
weight_bounds
# Combining
result_df <- bind_rows(weight_bounds, length_bounds, weight_3sd, length_3sd)
result_df
# To present it better
result_df(c(index))
# To present it better
result_df[c(index)]
# To present it better
result_df[c('index')]
# To present it better
result_df[c('index', 'condition', 'column', 'index' ,'value')]
# To present it better
final_df <- result_df[c('index', 'condition', 'column', 'index' ,'value')]
final_df
# weight not within 1 and inf
new_df %>% filter((weight < 1) | (weight > Inf)) %>%
select(index, weight)
# 3sd and mean of weight
weight_sd_3 <- sd(new_df$weight) * 3
weight_mean <- mean(new_df$weight)
# weight not within 3sd
new_df %>%
filter( (weight > weight_mean + weight_sd_3)
| (weight < weight_mean - weight_sd_3) ) %>%
select(index, weight)
# length not within 1 and inf
new_df %>% filter((length < 1) | (length > Inf)) %>%
select(index, length)
# 3sd and mean of length
length_sd_3 <- sd(new_df$length) * 3
length_mean <- mean(new_df$length)
# length not within 3sd
new_df %>%
filter((length > length_mean + length_sd_3)
| (length < length_mean - length_sd_3)) %>%
select(index, length)
#Topic 05-Cleaning the Data
###########################################
# Title: MW_5.1_Lee Ver.2
# Script Name:  HW_5.1_Lee Ver.2
# Name: Youngmin Lee
# Date: Oct 17 2022
# Script purpose: Class Homework for 5.1
#
###########################################
### Load the packages
library(tidyverse) # For tidy tools
library(mice)      # For the mice functions
library(assertr)   # For the assert functions
library(leaflet)   # For the leaflet functions
library(sp)        # For the sp functions
library(stringdist)
#import the full rodent data dataset
rawData <- read_csv("./dataset/rodentData_clean.csv")
# Some example code to use assert/insist to identify problems
tryCatch({rawData %>%
chain_start %>%
assert(within_bounds(1,Inf), weight) %>% # assert checks individual values
assert(within_bounds(1,Inf), length) %>%
insist(within_n_sds(3), weight) %>% # insist checks against calculated vals
insist(within_n_sds(3), length) %>%
chain_end
}, warning = function(w) {
paste("A warning was generated: ", w, sep = "")
}, error = function(e) {
print(e)
}, finally = {
print("this is the end of the validation check ...")
}
)
##############################################################################
## HW5 Here ##################################################################
## Copy and modify the assert/insist to find the errors in the weight data
# Yes
tryCatch({rawData %>%
chain_start %>%
assert(within_bounds(1,Inf), weight) %>% # assert checks individual values
insist(within_n_sds(3), weight) %>% # insist checks against calculated vals
chain_end
}, warning = function(w) {
paste("A warning was generated: ", w, sep = "")
}, error = function(e) {
print(e)
}, finally = {
print("this is the end of the validation check ...")
}
)
# create a new df and add a index column to track the data
new_df <- mutate(rawData)
new_df <- tibble::rowid_to_column(new_df, 'index')
names(new_df)
# Write Tidy R code (not using assert/insist) to identify records whose length
# and weight are not in a (1, Infinity) range and within 3 SDs
# weight not within 1 and inf
new_df %>% filter((weight < 1) | (weight > Inf)) %>%
select(index, weight)
# 3sd and mean of weight
weight_sd_3 <- sd(new_df$weight) * 3
weight_mean <- mean(new_df$weight)
# weight not within 3sd
new_df %>%
filter( (weight > weight_mean + weight_sd_3)
| (weight < weight_mean - weight_sd_3) ) %>%
select(index, weight)
# length not within 1 and inf
new_df %>% filter((length < 1) | (length > Inf)) %>%
select(index, length)
# 3sd and mean of length
length_sd_3 <- sd(new_df$length) * 3
length_mean <- mean(new_df$length)
# length not within 3sd
new_df %>%
filter((length > length_mean + length_sd_3)
| (length < length_mean - length_sd_3)) %>%
select(index, length)
# calmarx <- new_df %>% filter( (weight > weight_mean + weight_sd_3)
#                               | (weight < weight_mean - weight_sd_3) ) %>%
#   select(index, weight) %>% mutate(column = 'weight', condition = '1, Inf',
#                                    value = weight)
# calmarx
# YES!
# Now combine those data into a new dataframe
weight_bounds <- new_df %>% filter((weight < 1) | (weight > Inf)) %>%
mutate(condition = '(1, Inf)', column = 'weight', value = weight)
weight_3sd <- new_df %>%
filter( (weight > weight_mean + weight_sd_3)
| (weight < weight_mean - weight_sd_3)) %>%
mutate(condition = 'within 3sd', column = 'weight', value = weight)
length_bounds <- new_df %>% filter((length < 1) | (length > Inf)) %>%
mutate(condition = '(1, Inf)', column = 'length', value = length)
length_3sd <- new_df %>%
filter((length > length_mean + length_sd_3)
| (length < length_mean - length_sd_3)) %>%
mutate(condition = 'within 3sd', column = 'length', value = length)
# Combining
result_df <- bind_rows(weight_bounds, length_bounds, weight_3sd, length_3sd)
result_df
# To present it better
# And this is the final form!!
# The same number 312 as the assert and insist code produces
final_df <- result_df[c('index', 'condition', 'column', 'index' ,'value')]
final_df
View(final_df)
# YES!
# Now combine those data into a new dataframe
weight_bounds <- new_df %>% filter((weight < 1) | (weight > Inf)) %>%
mutate(condition = 'within (1, Inf)', column = 'weight', value = weight)
weight_3sd <- new_df %>%
filter( (weight > weight_mean + weight_sd_3)
| (weight < weight_mean - weight_sd_3)) %>%
mutate(condition = 'within 3sd', column = 'weight', value = weight)
length_bounds <- new_df %>% filter((length < 1) | (length > Inf)) %>%
mutate(condition = 'within (1, Inf)', column = 'length', value = length)
length_3sd <- new_df %>%
filter((length > length_mean + length_sd_3)
| (length < length_mean - length_sd_3)) %>%
mutate(condition = 'within 3sd', column = 'length', value = length)
# Combining
result_df <- bind_rows(weight_bounds, length_bounds, weight_3sd, length_3sd)
result_df
# To present it better
# And this is the final form!!
# The same number 312 as the assert and insist code produces
final_df <- result_df[c('index', 'condition', 'column', 'index' ,'value')]
final_df
# YES!
# Now combine those data into a new dataframe
weight_bounds <- new_df %>% filter((weight < 1) | (weight > Inf)) %>%
mutate(condition = 'within_(1, Inf)', column = 'weight', value = weight)
weight_3sd <- new_df %>%
filter( (weight > weight_mean + weight_sd_3)
| (weight < weight_mean - weight_sd_3)) %>%
mutate(condition = 'within_3sd', column = 'weight', value = weight)
length_bounds <- new_df %>% filter((length < 1) | (length > Inf)) %>%
mutate(condition = 'within_(1, Inf)', column = 'length', value = length)
length_3sd <- new_df %>%
filter((length > length_mean + length_sd_3)
| (length < length_mean - length_sd_3)) %>%
mutate(condition = 'within_3sd', column = 'length', value = length)
# Combining
result_df <- bind_rows(weight_bounds, length_bounds, weight_3sd, length_3sd)
result_df
# To present it better
# And this is the final form!!
# The same number 312 as the assert and insist code produces
final_df <- result_df[c('index', 'condition', 'column', 'index' ,'value')]
final_df
View(final_df)
setwd("C:/Users/ymlee/OneDrive2/OneDrive/R_studio/R_practice")
